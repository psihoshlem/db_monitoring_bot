from config import BOT_TOKEN, ADMIN_PASSWORD
import telebot
from telebot import types
from functions import write_admin
import json
from functions import terminate_long_running_queries

bot = telebot.TeleBot(BOT_TOKEN)
const_for_send_msg = True


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, <b>{0.first_name}</b>!".format(message.from_user), reply_markup=button_for_start(), parse_mode="HTML")


@bot.message_handler(content_types=['text'])
def func(message):
    if message.text == "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É":
        button_for_auth(message)
    elif message.text == "C–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥":
        show_all_commands(message)
    elif message.text == "–û–±–Ω–æ–≤–∏—Ç—å –ë–î":
        rebase_db(message)
    # elif message.text == "–°–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É":
    #     error_msg(message)
    else:
        bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω...")


def show_all_commands(message):
    button = telebot.types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ë–î', callback_data='my_button')
    button2 = telebot.types.InlineKeyboardButton('–õ–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏', callback_data='my_button')
    keyboard = telebot.types.InlineKeyboardMarkup().add(button, button2)
    bot.send_message(message.chat.id, 'C–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', reply_markup=keyboard)


def button_for_start():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    markup.add(btn1)
    return markup


def button_for_auth(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    exit_btn = types.KeyboardButton('–í—ã—Ö–æ–¥')
    markup.add(exit_btn)
    sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É', reply_markup=markup)
    bot.register_next_step_handler(sent, check_login)


def warning_session_message(id, number):
    fix_button = telebot.types.InlineKeyboardButton('–ü–æ—á–∏–Ω–∏—Ç—å', callback_data='fix_logs')
    keyboard = telebot.types.InlineKeyboardMarkup().add(fix_button)
    bot.send_message(id, f'–ß–∏–Ω–∏–º –ë–î {number}', reply_markup=keyboard)


def warning_long_query_message(id, pid, number, query):
    fix_button = telebot.types.InlineKeyboardButton('üîß –£—Å—Ç—Ä–∞–Ω–∏—Ç—å', callback_data='fix_logs')
    keyboard = telebot.types.InlineKeyboardMarkup().add(fix_button)
    bot.send_message(id, f'‚ö†Ô∏è <b>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–π –∑–∞–ø—Ä–æ—Å:</b>\n<b>PID: </b>{pid}\n<b>–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: </b>{number}\n<b>–ò–º—è –∑–∞–ø—Ä–æ—Å–∞:</b>{query}', reply_markup=keyboard, parse_mode="HTML")


def check_login(message):
    if message.text == ADMIN_PASSWORD:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –ë–î")
        btn2 = types.KeyboardButton("C–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
        # bth3 = types.KeyboardButton("–°–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É")
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, '–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω', reply_markup=markup)
        write_admin(message.chat.id)
    else:
        sent = bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑')
        bot.register_next_step_handler(sent, check_login)


def rebase_db(message):
    print("DROP DATABASE")
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # conn = psycopg2.connect(
    #     dbname="–Ω–∞–∑–≤–∞–Ω–∏–µ_–±–∞–∑—ã_–¥–∞–Ω–Ω—ã—Ö",
    #     user="–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    #     password="–ø–∞—Ä–æ–ª—å",
    #     host="—Ö–æ—Å—Ç",
    #     port="–ø–æ—Ä—Ç"
    # )
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫—É—Ä—Å–æ—Ä–∞
    # cur = conn.cursor()
    # try:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # cur.execute("SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '–Ω–∞–∑–≤–∞–Ω–∏–µ_–±–∞–∑—ã_–¥–∞–Ω–Ω—ã—Ö';")
        # conn.commit()
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # cur.execute("DROP DATABASE IF EXISTS –Ω–∞–∑–≤–∞–Ω–∏–µ_–±–∞–∑—ã_–¥–∞–Ω–Ω—ã—Ö;")
        # cur.execute("CREATE DATABASE –Ω–∞–∑–≤–∞–Ω–∏–µ_–±–∞–∑—ã_–¥–∞–Ω–Ω—ã—Ö;")
        # conn.commit()
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    #     cur.execute("pg_restore --dbname=–Ω–∞–∑–≤–∞–Ω–∏–µ_–±–∞–∑—ã_–¥–∞–Ω–Ω—ã—Ö --verbose –ø—É—Ç—å_–∫_—Ä–µ–∑–µ—Ä–≤–Ω–æ–π_–∫–æ–ø–∏–∏")
    #     conn.commit()
    # except (Exception, psycopg2.DatabaseError) as error:
    #     print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error)
    # finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –∫—É—Ä—Å–æ—Ä–∞
        # if conn is not None:
        #     conn.close()
        # if cur is not None:
        #     cur.close()


@bot.callback_query_handler(func=lambda call: call.data == 'my_button')
def process_callback_button(call):
    keyboard = create_inline_keyboard()
    bot.send_message(call.message.chat.id, 'C–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–¥', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'fix_logs')
def show_logs(call):
    long_query = terminate_long_running_queries()
    if long_query:
        for pid, duration in long_query:
            bot.send_message(call.message.chat.id, f"‚úÖ –ü—Ä–µ—Ä–≤–∞–Ω –∑–∞–ø—Ä–æ—Å <b>PID: </b>{pid}\n<b>–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–ª—Å—è: </b>{duration}.", parse_mode="HTML")
    else:
        bot.send_message(call.message.chat.id, "‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        # f"–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å PID {pid}, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É–∂–µ {duration}.


@bot.callback_query_handler(func=lambda call: call.data.startswith('test_db'))
def process_callback(call):
    button_number = call.data
    bot.send_message(call.message.chat.id, '–ë–î = {}'.format(button_number))


def create_inline_keyboard():
    with open("data.json", "r") as file:
        dbs = json.loads(file.read())["databases"]
    keyboard = types.InlineKeyboardMarkup()
    buttons = []
    for db in dbs:
        btn = create_inline_button(db, db)
        buttons.append(btn)
    for button in buttons:
        keyboard.row(button)
    return keyboard

def create_inline_button(text, data):
    return types.InlineKeyboardButton(text, callback_data=data)

if __name__=="__main__":
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
from telebot import types
import telebot

from config import BOT_TOKEN, ADMIN_PASSWORD

from functions import write_admin
from functions import get_data_json, get_statistic_chart
from functions import terminate_long_running_queries, get_average_execution_time_and_reset_stats
from shutdown_db import stop_postgresql_with_backup
from start_db import start_postgresql_with_restore
from restart_db import backup_and_restart_postgresql

bot = telebot.TeleBot(BOT_TOKEN)
const_for_send_msg = True


@bot.message_handler(commands=['start'])
def start(message):
    sent = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É', parse_mode="HTML")
    bot.register_next_step_handler(sent, check_login)


@bot.message_handler(content_types=['text'])
def func(message):
    if message.text == "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ë–î":
        show_all_commands(message)
    elif message.text == "–û–±–Ω–æ–≤–∏—Ç—å –ë–î":
        rebase_db(message)
    elif message.text == "–í—ã–∫–ª—é—á–∏—Ç—å –ë–î":
        off_db(message)
    elif message.text == "–í–∫–ª—é—á–∏—Ç—å –ë–î":
        on_db(message)
    else:
        bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω...")


async def show_all_commands(message):
    keyboard = create_inline_keyboard("show_bd_for_info")
    test = await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', reply_markup=keyboard)
    delete_message(test)


def warning_session_message(id, number):
    fix_button = telebot.types.InlineKeyboardButton('–ü–æ—á–∏–Ω–∏—Ç—å', callback_data='fix_logs')
    keyboard = telebot.types.InlineKeyboardMarkup().add(fix_button)
    bot.send_message(id, f'–ß–∏–Ω–∏–º –ë–î {number}', reply_markup=keyboard)


def warning_long_query_message(id, pid, number, query):
    fix_button = telebot.types.InlineKeyboardButton('üîß –£—Å—Ç—Ä–∞–Ω–∏—Ç—å', callback_data='fix_logs')
    keyboard = telebot.types.InlineKeyboardMarkup().add(fix_button)
    bot.send_message(id, f'‚ö†Ô∏è <b>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–π –∑–∞–ø—Ä–æ—Å:</b>\n<b>PID: </b>{pid}\n<b>–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: </b>{number}\n<b>–ò–º—è –∑–∞–ø—Ä–æ—Å–∞:</b>{query}', reply_markup=keyboard, parse_mode="HTML")


def check_login(message):
    if message.text == ADMIN_PASSWORD:
        delete_or_edit_msg(message)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å –ë–î")
        btn2 = types.KeyboardButton("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ë–î")
        btn3 = types.KeyboardButton("–í–∫–ª—é—á–∏—Ç—å –ë–î")
        btn4 = types.KeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ë–î")
        markup.add(btn1, btn2, btn3, btn4)
        bot.send_message(message.chat.id, '–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω', reply_markup=markup)
        write_admin(message.chat.id)
    else:
        sent = bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑')
        bot.register_next_step_handler(sent, check_login)


def rebase_db(message):
    keyboard = create_inline_keyboard("show_bd_for_rebase")
    bot.send_message(message.chat.id, '–ö–∞–∫—É—é –ë–î –±—É–¥–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å?', reply_markup=keyboard)


def off_db(message):
    keyboard = create_inline_keyboard("show_bd_for_off")
    bot.send_message(message.chat.id, '–ö–∞–∫—É—é –ë–î –±—É–¥–µ–º –≤—ã–∫–ª—é—á–∞—Ç—å?', reply_markup=keyboard)


def on_db(message):
    keyboard = create_inline_keyboard("show_bd_for_on")
    bot.send_message(message.chat.id, '–ö–∞–∫—É—é –ë–î –±—É–¥–µ–º –≤–∫–ª—é—á–∞—Ç—å?', reply_markup=keyboard)


def delete_or_edit_msg(message):
    bot.delete_message(message.chat.id, message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == 'my_button')
def process_callback_button(call):
    keyboard = create_inline_keyboard("show_bd_for_info")
    bot.send_message(call.message.chat.id, 'C–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–¥', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('avg_time'))
def process_callback_button(call):
    avarge_query_time = get_average_execution_time_and_reset_stats()
    bot.send_message(call.message.chat.id, text=f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤: \n{avarge_query_time} —Å–µ–∫—É–Ω–¥", parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: call.data == 'fix_logs')
def show_logs(call):
    long_query = terminate_long_running_queries()
    if long_query:
        for pid, duration in long_query:
            bot.send_message(call.message.chat.id, f"‚úÖ –ü—Ä–µ—Ä–≤–∞–Ω –∑–∞–ø—Ä–æ—Å <b>PID: </b>{pid}\n<b>–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–ª—Å—è: </b>{duration}.", parse_mode="HTML")
    else:
        bot.send_message(call.message.chat.id, "‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


@bot.callback_query_handler(func=lambda call: call.data.startswith('show_all_db'))
def process_callback(call):
    callback_data = call.data
    db_name = callback_data.split('-')[1]
    check_graf = telebot.types.InlineKeyboardButton('–ì—Ä–∞—Ñ–∏–∫–∏', callback_data=f'check_graf-{db_name}')
    configuration = telebot.types.InlineKeyboardButton('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', callback_data=f'configuration-{db_name}')
    avg_time = telebot.types.InlineKeyboardButton('–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', callback_data=f'avg_time')
    keyboard = telebot.types.InlineKeyboardMarkup().add(check_graf, configuration)
    keyboard.row(avg_time)
    bot.send_message(call.message.chat.id, f"<b>db:</b> {db_name}\n<b>–°–µ—Å—Å–∏–∏ lwlock:</b> ?\n<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:</b> ?\n<b>–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –±—É—Ñ–µ—Ä–∞: ?</b>",reply_markup=keyboard, parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: call.data.startswith('check_graf'))
def process_callback_button(call):
    callback_data = call.data
    db_name = callback_data.split('-')[1]
    buf1, buf2 = get_statistic_chart(db_name)
    bot.send_photo(call.message.chat.id, photo=buf1, caption=db_name)
    bot.send_photo(call.message.chat.id, photo=buf2, caption=db_name)


@bot.callback_query_handler(func=lambda call: call.data.startswith('rebase_db'))
def process_callback_button(call):
    callback_data = call.data
    db_name = callback_data.split('-')[1]

    restart_bd_message = backup_and_restart_postgresql(db_name)
    bot.send_message(call.message.chat.id, text=f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö <b>{restart_bd_message}</b> —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–∞, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∞", parse_mode="HTML")



@bot.callback_query_handler(func=lambda call: call.data.startswith('off_db'))
def process_callback_button(call):
    callback_data = call.data
    db_name = callback_data.split('-')[1]

    stop_bd_message = stop_postgresql_with_backup(db_name)
    bot.send_message(call.message.chat.id, text=f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö <b>{stop_bd_message}</b> —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: call.data.startswith('on_db'))
def process_callback_button(call):
    callback_data = call.data
    db_name = callback_data.split('-')[1]

    start_bd_message = start_postgresql_with_restore(db_name)
    bot.send_message(call.message.chat.id, text=f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {start_bd_message} —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.", parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: call.data.startswith('configuration'))
def process_callback_button(call):
    buttons = [
        types.InlineKeyboardButton('–í—Ä–µ–º—è –¥–ª—è —Å–µ—Å—Å–∏–π lwlock', callback_data='set_time-lwlock'),
        types.InlineKeyboardButton('–í—Ä–µ–º—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π', callback_data='set_time-activate'),
        types.InlineKeyboardButton('–í—Ä–µ–º—è –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –±—É—Ñ–µ—Ä–∞', callback_data='set_time-bufer')
    ]
    keyboard = telebot.types.InlineKeyboardMarkup()
    for button in buttons:
        keyboard.add(button)
    bot.send_message(call.message.chat.id, '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –º–µ—Ç—Ä–∏–∫', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('set_time'))
def process_callback_button(call):
    callback_data = call.data
    conf_param = callback_data.split('-')[1]
    if conf_param == "lwlock":
        sent = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ—Å—Å–∏–π lwlock')
        output_msg = "lwlock"
    elif conf_param == "activate":
        sent = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π')
        output_msg = "activate"
    elif conf_param == "bufer":
        sent = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –±—É—Ñ–µ—Ä–∞')
        output_msg = "bufer"
    bot.register_next_step_handler(sent, set_time_params)


def set_time_params(message):
    bot.send_message(message.chat.id, f'–í—ã–±—Ä–∞–Ω–Ω–æ –≤—Ä–µ–º—è {message.text}')

def create_inline_keyboard(key_value):
    dbs = get_data_json()["databases"].keys()
    keyboard = types.InlineKeyboardMarkup()
    buttons = []
    if key_value == "show_bd_for_info":
        callback = "show_all_db"
    elif key_value == "show_bd_for_rebase":
        callback = "rebase_db"
    elif key_value == "show_bd_for_off":
        callback = "off_db"
    elif key_value == "show_bd_for_on":
        callback = "on_db"
    for db in dbs:
        callback_data = f"{callback}-{db}"
        btn = create_inline_button(db, callback_data)
        buttons.append(btn)
    for button in buttons:
        keyboard.row(button)
    return keyboard


def create_inline_button(text, data):
    return types.InlineKeyboardButton(text, callback_data=data)


if __name__=="__main__":
    bot.infinity_polling(timeout=10, long_polling_timeout=5)